{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","json","resp","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAYhD,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAeP,GAAf,mBAA6BO,OAC3CN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAXhB,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,a,+BCN7CG,EAAO,uCAAG,WAAOL,GAAP,iCAAAM,EAAA,4FAAyB,GACtCC,EADa,8FACgF,GADhF,MACwFC,UACvGR,IAFe,SAKOS,MAAMF,GALb,8BAKmBG,OALnB,cAKbC,EALa,OAMXC,EAASD,EAATC,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC5BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAEtCa,QAAQC,IAAIR,GAbO,kBAcZA,GAdY,4CAAH,sDCEPS,EAAc,SAAC,GAAmB,EAAlBN,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACI,sBAAKgB,UAAU,2DAAf,UACI,qBAAKA,UAAU,gBAAf,SACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,MAExB,4BAAIA,QCJHS,EAAU,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAAe,ECHb,SAACA,GAAc,IAAD,EACZR,mBAAS,CAC/BoB,KAAK,GACLe,SAAQ,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KAYtC,OAPAC,qBAAU,WACNzB,EAAQL,GAAU+B,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACpCjB,KAAKoB,EACLL,SAAQ,SAEb,CAAC3B,IAEG4B,EDPgBK,CAAajC,GAA7B2B,EAF8B,EAE9BA,QAAQf,EAFsB,EAEtBA,KAEf,OACI,gCACI,6BAAKZ,IACJ2B,GAAW,6CACZ,oBAAIJ,UAAU,iBAAd,SAEQX,EAAKE,KAAI,SAAAoB,GAAK,OAAI,cAAC,EAAD,eAAgCA,GAAdA,EAAMlB,aEO/CmB,EAnBM,WAAM,MAGW3C,mBAAS,IAHpB,mBAGlB4C,EAHkB,KAGN7C,EAHM,KAKzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG6C,EAAWtB,KAAI,SAACd,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,YCVxBqC,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.4a794b46.chunk.js","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n  \n  const handleInputChange = (e) => setInputValue(e.target.value);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((category) => [inputValue,...category]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='text' value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category, limit = 10) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=dtRmi7FGvKUvs5hr39XNAnHMCn77osAA&limit=${10}&q=${encodeURI(\n        category\n    )}`;\n\n    const resp = await (await fetch(url)).json();\n    const { data } = resp;\n\n    const gifs = data.map((img) => ({\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url,\n    }));\n    console.log(gifs);\n    return gifs;\n};\n","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeInUp animate__faster\">\n            <div className=\"img-container\">\n                <img src={url} alt={title}/>\n            </div>\n            <p>{title}</p>        \n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n// import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n    \n    const {loading,data} = useFetchGifs(category);\n    \n    return (\n        <div>\n            <h3>{category}</h3>\n            {loading && <p> Cargando...</p>}\n            <ol className='card-container'>\n                {\n                    data.map(image => <GifGridItem key={image.id} {...image} />)\n                }\n            </ol>\n        </div>\n    );\n};\n","import {useState,useEffect} from 'react'\nimport {getGifs} from '../helpers/getGifs'\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    });\n    useEffect(() => {\n        getGifs(category).then(imgs => setState({\n            data:imgs,\n            loading:false\n        }));\n    }, [category]);\n\n    return state;\n}\n","import { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\nconst GifExpertApp = () => {\n\n  //busquedas\n  const [categories, setCategories] = useState([]);\n\n  return (\n    <>\n      <h1>GifExpertApp</h1>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport 'animate.css';\nReactDOM.render(<GifExpertApp />,document.getElementById('root')\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}